

Lab Exercise #3 -- Combinational Components (Instructor Notes)

B. Multiplexers

A multiplexer uses N control signals to select one of 2^N data signals to be
mapped to the output signal.

The file "~cse320/Labs/lab03.mux.c" contains a C++ module which is a test bed
for experimenting with the multiplexer ("Mux") component.

1. Bring the module into simulation using the UNIX command:

   <prompt> sim ~cse320/Labs/lab03.mux.c

a) Give the initial value of all signals which are inputs to the selection and
data ports on this 4-to-1 Mux.

   C1: ___0__  C0: ___0__    D3: ___1__  D2: ___1__  D1: ___0__  D0: ___0__

b) What is the initial value of the output from the Mux?  Explain.

  The initial output is 0.  The initial value of the control signal (bits C1
  and C0) is 00, so data port 0 is selected and it's initial value is 0.


c) Which of the inputs to the data ports can be changed using the switches?
Which cannot?  Explain.

  The inputs to data ports 2, 1 and 0 can be changed since variable signals
  are connected to those three data ports.  Those variable signals are
  produced by switches.

  The input to data port 3 cannot be changed since a constant signal ("One")
  is connected to that data port.


2. Experiment with the test bed and answer the following questions.

a) Assert both control signals.  What is the output from the Mux?  Explain.

  Note:  the responses to (a), (b) and (c) assume that none of the values on
  the data ports have changed from their initial value.

  When the control signal is 11, the output is 1 (data port 3 selected).


b) De-assert one control signal, leaving the other signal asserted.  What is
the output from the Mux?  Explain.

  When the control signal is 01, the output is 0 (data port 1 selected).


c) Reverse the values of the two control signals (one asserted, the other
de-asserted).  What is the output from the Mux?  Explain.

  When the control signal is 10, the output is 1 (data port 2 selected).


d) Experiment with the data inputs:  assert a subset of the data inputs, then
show that the Mux routes one of the data inputs to its output, depending on
the control inputs.  Give the characteristic table (abbreviated truth table)
for this multiplexer, and classify it using notation like "N-to-1 Mux".

  This circuit is a 4-to-1 MUX.  The characteristic table is given below.

  C1 C0 | Output
  ------+-------
   0  0 |   D0
   0  1 |   D1
   1  0 |   D2
   1  1 |   1


3. Copy the C++ module into your account, then modify it to allow the user to
vary any of the inputs to the data port (by adding another switch).

C. Banks of Multiplexers

In many situations, it is useful to create a bank of multiplexers to choose
between multi-bit data signals.  For example, a bank of sixteen 4-to-1 Muxes
could be used to select one 16-bit data signal out of a set of four 16-bit
data signals and map it to the 16-bit output signal.

The file "~cse320/Labs/lab03.mux_bank.c" contains a C++ module which is a test
bed for experimenting with a bank of multiplexers.

In that module, function "Mux421" is invoked with three parameters:  a
schematic descriptor (so that the row and column indicators inside the
function are relative positions), an input signal, and an output signal.

1. Examine that C++ source code module and answer the following questions.

a) How should this bank of multiplexers be described?  That is, how many data
signals are there?  How many output signals are there?  How wide is each data
and output signal?

  There are two data signals and one output signal.  The data signals and
  the output signal are all 4-bit signals.

  The circuit is a bank of four 2-to-1 multiplexers.


b) How wide (in bits) is the input signal parameter?  What does each subset of
bits within that input signal represent?

  The input signal ("In") is a 9-bit signal.

  Bit 8 is the control signal.
  Bits 7:4 are the first operand ("ItemA").
  Bits 3:0 are the second operand ("ItemB").  


c) How wide (in bits) is the output signal parameter?  Explain.

  The output signal ("Out") is a 4-bit signal representing the 4-bit
  output of of the bank of four 2-to-1 multiplexers.


2. Bring the module into simulation using the UNIX command:

   <prompt> sim ~cse320/Labs/lab03.mux_bank.c

Note:  the 'Page Down' key with the 'F12' key to redraw) can be used to
examine the inside of a module; the 'Page Up' key can be used to back up.

a) Use the keys 'a' to 'd' to set the Port 1 data signal to a particular
bit pattern.  What output is displayed on the output probes?  Explain.

  Since the control signal is still 0, data port 0 is selected and the output
  is 0000 (the initial value on data port 0).


b) Uses the keys '1' to '4' to set the Port 0 data signal to a particular
bit pattern.  Now, what output is displayed?  Explain.

  Assume that the '3' and '4' keys are touched.  Since the control signal is
  still 0, data port 0 is selected and the output is 0011.


3. The "Mux" component in "sim" supports N-bit data and output signals
directly:  the width of the output signal determines the width of each of the
data signals.  Use "simhelp Mux" to view the brief component overview.

Copy the C++ module into your account, then modify it to use a standard "Mux"
component (with 4-bit data and output signals) instead of function "Mux421".

D. Decoders
 
The file "~cse320/Labs/lab03.decoder.c" contains a C++ module which is a test
bed for experimenting with the decoder components.

1. Bring the module into simulation using the UNIX command:

   <prompt> sim ~cse320/Labs/lab03.decoder.c

a) Initially, all of the probes display the value "Zero", indicating that none
of the decoder outputs are asserted.  Explain.

  The decoder is not enabled ("Enable" is 0), so none of the output signals
  are asserted.


b) Touch the 'e' key to enable the decoder.  What do the probes display?
Explain (the 'F8' function key may be helpful).

  The probes all show X (in transition).  The counter has not yet been
  initialized, so the current state is undefined.


c) Touch the 'r' key to reset the counter.  What values do the probes
display?  Explain.

  The output is 00000001 (output port 0 selected since the value 000 is being
  decoded).


d) Touch the 's' key three times to make the counter move through the sequence
{0, 1, 2, 3}.  What values do the probes display?  Explain.

  The output is 00001000 (output port 3 selected since the value 011 is being
  decoded).


e) Touch the 'r' key to reset the counter.  What values do the probes
display?  Explain.

  The output is 00000001 (output port 0 selected since the value 000 is being
  decoded).  The counter was reset into the initial state.


f) Touch the 'e' key to disable the decoder.  What values do the probes
display?  Explain.

  The output is 00000000 (none of the output ports selected since the
  decoder is not enabled).


2. Copy the C++ module into your account, then modify it so that it uses a
3-bit counter and a 4-to-16 decoder.  The most significant bit of the data
input to the decoder will be controlled by a switch.

