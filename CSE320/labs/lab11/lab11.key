

Lab Exercise #11 -- SPARC Data Movement and Organization

A. Consider the following SPARC assembly language program.

1.  In the spaces provided, give the hexadecimal contents (each byte) of the
requested memory locations and registers after the instructions are executed.

===============================================================================
        .global  main

        .section ".data"
        .align   4
nums:
        .byte    0x93, 0x2e
        .half    0x3a67, 0xba98, 0x7654
store:
        .word    0xffffffff, 0xeeeeeeee, 0xdddddddd

        .section ".text"
        .align   4
main:
        save     %sp, -96, %sp

        set      0x12345678, %l7         ! 0x12345678 --> %l7
        set      store, %l6              ! address of store --> %l6
  
        st       %l7, [%l6+0]            ! store word
        sth      %l7, [%l6+4]            ! store halfword
        stb      %l7, [%l6+8]            ! store byte

!  store+0:  __12__  __34__  __56__  __78__
!
!  store+4:  __56__  __78__  __ee__  __ee__
!
!  store+8:  __78__  __ff__  __ff__  __ff__
 
        set      nums, %l5               ! address of nums --> %l5

        ld       [%l5+4], %l0            ! load word
        ldsh     [%l5+4], %l1            ! load signed halfword
        lduh     [%l5+4], %l2            ! load unsigned halfword
        ldsb     [%l5+4], %l3            ! load signed byte
        ldub     [%l5+4], %l4            ! load unsigned byte

!  l0:  __ba__  __98__  __76__  __54__
!
!  l1:  __ff__  __ff__  __ba__  __98__
!
!  l2:  __00__  __00__  __ba__  __98__
!
!  l3:  __ff__  __ff__  __ff__  __ba__
!
!  l4:  __00__  __00__  __00__  __ba__

        ret
        restore
===============================================================================



B. Working with arrays of characters.

The source file named "~cse320/Labs/lab11.partB.s" contains a program to read
a sequence of characters from standard input and store the characters in an
array.  The program uses the C library functions "getchar" and "printf" to
handle communication with the user.

1. Copy the source file into your account and examine the program.  Assemble
and execute the program, then answer each of the following questions.

a) Give the hexadecimal value of each of the following symbolic constants:

   EOL   __0000000A______________      SIZE   __0000003c______________

b) Why is space for the formatting strings ("fmt1" and "fmt2") reserved in the
".text" section, while space for the character sequences ("original" and
"copy") is reserved in the ".data" section?

   The symbolic addresses "fmt1" and "fmt2" are the addresses of two
   constant data objects (C-style character strings).  Since they are
   both constant data objects, they can be placed in section ".text",
   which is a "read-only" section of memory.

   The symbolic addresses "original" and "copy" are the addresses of
   two variable data objects.  Since they are both variable data
   objects, they must be placed in section ".data", which is a
   "read-write" section of memory.

c) The loop to read characters from standard input may terminate under two
different circumstances.  What are those two circumstances, and why are both
comparisons necessary?

   The loop will terminate if the end-of-file condition is true or
   the array is full.  If the end-of-file condition is true, then
   there isn't another character to insert into the array.  If the
   array is full, then there is no room to insert an additional
   character.

