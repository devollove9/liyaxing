

Lab Exercise #12 -- SPARC Floating Point Operations

A. The files named "lab12.A.main.c" and "lab12.A.sub.s" contain the source
code modules for a program which performs some floating point calculations.

1. Examine the contents of "lab12.A.main.c", then answer the questions below.

a) How many bytes are allocated for array "vec"?                 _80_________

b) How many bytes are allocated for one element in array "vec"?  __8_________

c) What is the value of "N" when the program executes?           _10_________

2. Examine the contents of "lab12.A.sub.s", then answer the questions below.

a) Describe the general purpose of function "sum_vector".

  Function "sum_vector" computes and returns the sum of all elements in the
  array.  It also counts the number of positive elements and the number of
  negative elements (and stores those counts in memory).


b) Describe the information which is passed into function "sum_vector".

  argument 1:  address of array of double precision values (pointer)
  argument 2:  number of elements in array (integer)
  argument 3:  address to use for number of negative elements (pointer)
  argument 4:  address to use for number of positive elements (pointer)


d) For each of the indicated assembly language instructions in the listing of
function "sum_vector" on the next page, provide a meaningful comment.



! Function sum_vector

        .global  sum_vector

        .section ".text"
        .align   4
sum_vector:
        save     %sp, -96, %sp     ! Shift register window (new locals and outs)

        set      zero, %l7         ! Put address "zero" into %l7

        ldd      [%l7], %f0        ! Sum of all elements (initialize to 0.0)

        ldd      [%l7], %f30       ! Comparison value (0.0)

        clr      %l1               ! Array index (initialize to 0)

        clr      %l2               ! Count of negative elements (initialize to 0)

        clr      %l3               ! Count of positive elements (initialize to 0)
loop:
        cmp      %l1, %i1          ! Compare array index to limit

        bge      endloop           ! If array index GE limit, exit loop
        nop

        smul     %l1, 8, %l0       ! Array offset = array index * 8

        ldd      [%i0+%l0], %f4    ! Load current array element

        faddd    %f0, %f4, %f0     ! Add current array element to sum
if:
        fcmpd    %f4, %f30         ! Compare current array element to 0.0
        nop
        fbge     else              ! If GE 0.0, skip to else clause
        nop
then:
        inc      %l2               ! Increment count of negative elements

        ba       endif             ! Skip else clause
        nop
else:
        inc      %l3               ! Increment count of positive elements
endif:
        inc      %l1               ! Increment array index

        ba       loop              ! Skip to top of loop
        nop
endloop:
        st       %l2, [%i2]        ! Store count of negative elements

        st       %l3, [%i3]        ! Store count of positive elements

        ret
        restore                    ! Shift register window back

        .align   8                 ! Issue padding to force onto 8-byte boundary
zero:
        .double  0r0.0             ! Read-only constant 0.0

